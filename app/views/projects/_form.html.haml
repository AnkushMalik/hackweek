= render partial: 'comments/help'
= form_for @project, url: (@project.new_record? ? projects_path : project_path(@episode, @project)), html: { role: :form } do |f|
  - if @project.errors.any?
    .alert.alert-warning
      %strong
        = pluralize(@project.errors.count, 'error')
        prohibited this project from being saved:
      %ul
      - @project.errors.full_messages.each do |msg|
        %li
          = msg

  .form-group
    = f.text_field :title, placeholder: 'Project title', class: 'form-control input-lg', required: 'required'

  .panel.panel-default
    .panel-heading{style: 'display:flex; justify-content: space-between'}
      %ul.nav.nav-pills
        %li.active#show-source{ role: :presentation }
          %a{ href: '#markdown-source', role: :tab, data: { toggle: :tab } } Edit
        %li#show-preview{ role: :presentation }
          %a{ href: '#markdown-preview', role: :tab, data: { toggle: :tab } } Preview
      .btnbar
        %a.btn.btn-default{onclick: "$('#project_description').append(' @');$('#project_description')[0].click();"}
          %i.fa.fa-at
        %a.btn.btn-default{onclick: "$('#project_description').append(' :');$('#project_description')[0].click();"}
          %i.fa.fa-smile-o
        %a.btn.btn-default{onclick: "$('#project_description').append(' [this](link-here)');$('#project_description')[0].click();"}
          %i.fa.fa-link

    .panel-body
      .tab-content
        #markdown-source.tab-pane.active.fade.in{ role: 'tab-pane' }
          .form-group
            = f.text_area :description, rows: 20, placeholder: 'Detailed description of your idea. You can use **markdown**.', class: 'form-control input-lg markdown-source-text', id: 'project_description'
        #markdown-preview.tab-pane.fade{ role: 'tab-pane' }
          #loading-spinner
            = fa_icon 'spinner pulse 3x'
          #preview-contents.hidden

  .form-group
    = f.label(:avatar)
    = f.file_field :avatar
  = f.submit class: 'btn btn-success pull-right'
:javascript
    console.log('working!!!')
    var emojis = [
      "smile", "iphone", "girl", "smiley", "heart", "kiss", "copyright", "coffee",
      "a", "ab", "airplane", "alien", "ambulance", "angel", "anger", "angry",
      "arrow_forward", "arrow_left", "arrow_lower_left", "arrow_lower_right",
      "arrow_right", "arrow_up", "arrow_upper_left", "arrow_upper_right",
      "art", "astonished", "atm", "b", "baby", "baby_chick", "baby_symbol",
      "balloon", "bamboo", "bank", "barber", "baseball", "basketball", "bath",
      "bear", "beer", "beers", "beginner", "bell", "bento", "bike", "bikini",
      "bird", "birthday", "black_square", "blue_car", "blue_heart", "blush",
      "boar", "boat", "bomb", "book", "boot", "bouquet", "bow", "bowtie",
      "boy", "bread", "briefcase", "broken_heart", "bug", "bulb",
      "person_with_blond_hair", "phone", "pig", "pill", "pisces", "plus1",
      "point_down", "point_left", "point_right", "point_up", "point_up_2",
      "police_car", "poop", "post_office", "postbox", "pray", "princess",
      "punch", "purple_heart", "question", "rabbit", "racehorse", "radio",
      "up", "us", "v", "vhs", "vibration_mode", "virgo", "vs", "walking",
      "warning", "watermelon", "wave", "wc", "wedding", "whale", "wheelchair",
      "white_square", "wind_chime", "wink", "wink2", "wolf", "woman",
      "womans_hat", "womens", "x", "yellow_heart", "zap", "zzz", "+1",
      "-1"
    ]
    var emojis = $.map(emojis, function(value, i) {return {key: value, name:value}});
    data = #{raw User.pluck(:name).compact.to_json};
    var emoji_config = {
      at: ":",
      data: emojis,
      displayTpl: "<li>${name} <img src='https://assets-cdn.github.com/images/icons/emoji/${key}.png'  height='20' width='20' /></li>",
      insertTpl: ':${key}:',
      delay: 400
    }
    $('textarea').atwho({at:"@", 'data':data}).atwho(emoji_config);
